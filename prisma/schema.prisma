// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userID       String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  phone        String   @unique
  gender       Gender
  dateOfBirth  DateTime
  userType     UserType @default(USER)
  refreshToken String?

  addressDetails   AddressDetails?
  addressDetailsId String?

  carts     Cart[]
  wishlists Wishlist[]

  otp   OTP?
  otpId String?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserType {
  USER
  DOCTOR
  ADMIN
}

model AddressDetails {
  id           String  @id @default(uuid())
  name         String
  patientName  String
  phone        String
  state        String
  pinCode      String
  city         String
  localityArea String
  landmark     String?

  // Relation to Users
  userID String @unique
  user   Users  @relation(fields: [userID], references: [userID])
}

model OTP {
  id        Int      @id @default(autoincrement())
  userID    String   @unique
  otpCode   String
  phone     String
  email     String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  user      Users    @relation(fields: [userID], references: [userID])
}

// medicine schemas
model Medicine {
  medicine_id           Int          @id @default(autoincrement())
  name                  String
  category_id           Int
  category              Category     @relation(fields: [category_id], references: [category_id])
  price                 Float
  brand_id              Int
  brand                 Brand        @relation(fields: [brand_id], references: [brand_id])
  manufacturer_id       Int
  manufacturer          Manufacturer @relation(fields: [manufacturer_id], references: [manufacturer_id])
  stock_quantity        Int
  expiry_date           DateTime
  description           String
  prescription_required Boolean

  cart      Cart[]
  wishlists Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Manufacturer {
  manufacturer_id Int        @id @default(autoincrement())
  name            String     @unique
  medicines       Medicine[]
  description     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Category {
  category_id Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  medicines   Medicine[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Brand {
  brand_id    Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  medicines   Medicine[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// cart model
model Cart {
  cart_id     Int      @id @default(autoincrement())
  user_id     String
  user        Users    @relation(fields: [user_id], references: [userID])
  medicine_id Int
  medicine    Medicine @relation(fields: [medicine_id], references: [medicine_id])
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([user_id, medicine_id])
}

// wishlist model
model Wishlist {
  wishlist_id Int      @id @default(autoincrement())
  user_id     String
  user        Users    @relation(fields: [user_id], references: [userID])
  medicine_id Int
  medicine    Medicine @relation(fields: [medicine_id], references: [medicine_id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([user_id, medicine_id])
}

// doctor models
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum AppointmentType {
  ONLINE
  OFFLINE
}

model Doctor {
  id               String   @id @default(uuid())
  phoneNumber      String   @unique
  isVerified       Boolean  @default(false)
  profileCompleted Boolean  @default(false)
  refreshToken     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  doctorDetails      DoctorDetails?
  doctorEducation    DoctorEducation?
  doctorRegistration DoctorRegistration?
  clinic             Clinic?
  appointment        Appointment[]
  schedule           DoctorSchedule[]
  slots              Slots[]
}

model DoctorDetails {
  id             String  @id @default(uuid())
  doctorId       String  @unique
  name           String
  gender         String
  speciality     String
  experience     Int     @default(0)
  state          String
  district       String
  city           String
  appointmentFee Decimal
  hospitalId     String?

  doctor   Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  hospital Hospital? @relation(fields: [hospitalId], references: [id])
}

model DoctorEducation {
  id                String @id @default(uuid())
  doctorId          String @unique
  degree            String
  collegeUniversity String
  completionYear    Int

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorRegistration {
  id                  String @id @default(uuid())
  doctorId            String @unique
  registrationNumber  String @unique
  registrationCouncil String
  registrationYear    Int

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model DoctorSchedule {
  id        String   @id @default(uuid())
  doctorId  String
  day       Day
  startTime DateTime
  endTime   DateTime
  totalSlots Int
  recurring  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships...
  doctor Doctor @relation(fields: [doctorId], references: [id])
}

model Slots {
  id String @id @default(uuid())
  doctorId String
  isBooked Boolean @default(false)
  startTime DateTime
  slotDuration Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationaships
  doctor Doctor @relation(fields: [doctorId], references: [id])
}

model Clinic {
  id                   String   @id @default(uuid())
  doctorId             String   @unique
  clinicName           String
  clinicSpeciality     String
  clinicContactNo      String[]
  clinicRegistrationNo String   @unique
  clinicSignBoard      String
  state                String
  district             String
  city                 String
  pincode              String
  nearbyLocation       String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  appointments Appointment[]
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
}

model Hospital {
  id                     String   @id @default(uuid())
  hospitalName           String
  hospitalSpeciality     String
  hospitalContactNo      String[]
  hospitalRegistrationNo String   @unique
  hospitalSignBoard      String
  state                  String
  district               String
  city                   String
  pincode                String
  nearbyLocation         String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // relations
  doctor DoctorDetails[]
}

model Appointment {
  id              String            @id @default(uuid())
  userId          String
  doctorId        String
  patientName     String
  patientAge      Int
  patientGender   Gender
  patientPhone    String
  appointmentDate DateTime
  appointmentType AppointmentType
  clinicId        String?
  status          AppointmentStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  doctor Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  clinic Clinic? @relation(fields: [clinicId], references: [id])
}

model MedicalHistory {
  id String @id @default(uuid())
  doctorId String
  userId String
  patientName     String
  patientAge      Int
  patientGender   Gender
  patientPhone    String
  appointmentDate DateTime
  appointmentType AppointmentType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  doctor Doctor @relation(fields: [], references: [])
  user Users @relation(fields: [], references: [])
}
